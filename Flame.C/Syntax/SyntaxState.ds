using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;
using Flame.C;
using Flame.C.Build;
using Flame.C.Lexer;

namespace Flame.Syntax.C
{
    public class SyntaxState : ICSyntaxState
    {
        public const this(set CompilationUnit DeclaringUnit, set IMethod Method,
            set IBinder Binder, set ICompilerLog Log,
            set IConverter<IType, string> TypeNamer)
        {
            this.MemberProvider = new MemberProvider(Binder);
            this.declaredVariables = new Stack<Dictionary<string, IVariable>>();
            PushScope();
        }
        public const this(set CompilationUnit DeclaringUnit, set IMethod Method,
            set IBinder Binder, set ICompilerLog Log,
            set IMemberProvider MemberProvider,
            set IConverter<IType, string> TypeNamer)
        {
            this.declaredVariables = new Stack<Dictionary<string, IVariable>>();
            PushScope();
        }

        public IType CurrentType
        {
            const get
            {
                var declType = Method.DeclaringType;
                if (declType.IsGeneric && declType.IsGenericDeclaration)
                {
                	return declType.MakeGenericType((IEnumerable<IType>)declType.GetGenericParameters());
                }
                else
                {
                	return declType;
                }
            }
        }

        public CompilationUnit DeclaringUnit { const get; private set; }
        public ICompilerLog Log { const get; private set; }
        public IBinder Binder { const get; private set; }
        public IConverter<IType, string> TypeNamer { const get; private set; }
        public IMemberProvider MemberProvider { const get; private set; }

        private Stack<Dictionary<string, IVariable>> declaredVariables;
        public Dictionary<string, IVariable> Locals
        {
            const get
            {
            	Dictionary<string, IVariable> dict = new Dictionary<string, IVariable>();
            	foreach (var map in declaredVariables)
            	foreach (var item in map)
            	{
            		dict[item.Key] = item.Value;
            	}
                return dict;
            }
        }

        public IMethod Method { const get; private set; }

		private IVariableProvider paramProvider;
        public IVariableProvider ParameterProvider
        {
            const get
            {
            	if (paramProvider == null)
            	{
            		paramProvider = new MethodParameterProvider(Method);
            	}
                return paramProvider;
            }
        }
        public IType ReturnType
        {
            const get
            {
                return Method.ReturnType;
            }
        }
        public IType DeclaringType
        {
            const get
            {
                return Method.DeclaringType;
            }
        }
        public IVariable DeclareVariable(string Name, IVariable Variable)
        {
            declaredVariables.Peek().Add(Name, Variable);
            return Variable;
        }
        public const IVariable GetVariable(string Name)
        {
            var localDict = Locals;
            if (localDict.ContainsKey(Name))
            {
                return localDict[Name];
            }
            else if (ParameterProvider != null && ParameterProvider.VariableExists(Name))
            {
                return ParameterProvider.GetVariable(Name);
            }
            return null;
        }
        public const bool VariableExists(string Name)
        {
            var localDict = Locals;
            if (localDict.ContainsKey(Name))
            {
                return true;
            }
            else
            {
                return ParameterProvider != null && ParameterProvider.VariableExists(Name);
            }
        }

        public void PushScope()
        {
            this.declaredVariables.Push(new Dictionary<string, IVariable>());
        }

        public IStatement PopScope()
        {
            List<IStatement> statements = new List<IStatement>();
            var scopeVars = declaredVariables.Pop();
            foreach (var item in scopeVars)
            {
                statements.Add(item.Value.CreateReleaseStatement());
            }
            return new BlockStatement(statements.ToArray());
        }

        #region Declarations

        public IMethod Declare(SyntaxFunction Function)
        {
            return DeclaringUnit.Declare(Function);
        }

        public IType Declare(SyntaxStruct Type)
        {
            return DeclaringUnit.Declare(Type);
        }

        public IField Declare(SyntaxField Field)
        {
            return DeclaringUnit.Declare(Field);
        }

        #endregion
    }
}
