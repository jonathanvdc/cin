using System;
using System.Collections.Generic;
using Flame.Compiler;
using Flame.Compiler.Variables;
using Flame.Compiler.Statements;
using Flame.Compiler.Expressions;
using Flame.C;
using Flame.C.Build;
using Flame.C.Lexer;

namespace Flame.Syntax.C
{
    public class SingleVariableDeclaration : ISourceSyntax
    {
        public const this(set IDeclaratorSyntax Declarator)
        {
            this.Operator = Token.Undefined;
            this.Value = null;
        }
        public const this(set IDeclaratorSyntax Declarator, set Token Operator, set IExpressionSyntax Value);

        public IDeclaratorSyntax Declarator { const get; private set; }
        public Token Operator { const get; private set; }
        public IExpressionSyntax Value { const get; private set; }

        public string Name { const get return Declarator.Name; }

        public SourceLocation AssignmentLocation
        {
            const get
            {
                if (Value == null) return null;
                else return Operator.Location.Concat(Value.GetSourceLocation());
            }
        }

        public SourceLocation Location
        {
            const get
            {
                if (Value == null) return Declarator.GetSourceLocation();
                else return Declarator.GetSourceLocation().Concat(AssignmentLocation);
            }
        }

        public const IVariable GetDeclaredVariable(ISyntaxState State)
        {
            return State.GetVariable(Name);
        }

        public const IStatement CreateStatement(IType ElementType, ISyntaxState State)
        {
        	var variable = CreateVariable(ElementType, State);
        	if (variable is AssignedVariable)
        	{
        		return ((AssignedVariable)variable).CreateStoreStatement();
        	}
        	else
        	{
        		return new EmptyStatement();
        	}
        }

        public const IVariable CreateVariable(IType ElementType, ISyntaxState State)
        {
            if (Value == null)
            {
                if (ElementType == null)
                {
                    State.Log.LogError(new LogEntry(
                        "type inference error",
                        "could not infer type in variable declaration '" + this.GetCode().Trim().ToString() + "' as the variable was not initialized with an expression",
                        Location));
                }
                else if (!ElementType.IsDefined)
                {
                    State.Log.LogWarning(new LogEntry(
                        "variable of undefined type",
                        "a variable of incomplete type '" + State.TypeNamer.Convert(ElementType) + "' is declared. " +
                        "This is not allowed by the C standard, though cin allows it if said type is completed " +
                        "before its definition is required.",
                        Location));
                }

                return State.DeclareVariable(Declarator.Name, Declarator.CreateType(ElementType, (ICSyntaxState)State), Location);
            }
            else
            {
                IVariable val = SyntaxExtensions.CreateVerifiedVariable(Value, State);

                var type = ElementType;

                if (ElementType == null)
                {
                	type = val.Type;
                }
                else
                {
                    if (!type.IsDefined)
                    {
                        State.Log.LogError(new LogEntry(
                            "variable of undefined type",
                            "declaring and assigning a variable of incomplete type '" + State.TypeNamer.Convert(type) + "' " +
                            "requires a well-defined type.",
                            Location));
                    }

                    if (CastSyntax.UseImplicitCast(State, val.Type, type))
                    {
                    	val = new ExpressionVariable(CastSyntax.CreateImplicitCast(State, val.CreateGetExpression(), Value, type));
                    }
                }

                var variable = State.DeclareVariable(Declarator.Name, Declarator.CreateType(type, (ICSyntaxState)State), Location);
                return new AssignedVariable(variable, val);
            }
        }

        public override const string ToString()
        {
            return GetCode().ToString();
        }

        public const CodeBuilder GetCode()
        {
            var cb = new CodeBuilder();
            cb.Append(Declarator.GetCode());
            if (Value != null)
            {
                cb.Append(Operator.TokenValue);
                cb.Append(Value.GetCode());
            }
            return cb;
        }
    }
}
