using System;
using System.Collections.Generic;
using Flame.Compiler;
using Flame.Compiler.Variables;
using Flame.Compiler.Statements;
using Flame.Compiler.Expressions;
using Flame.C;
using Flame.C.Lexer;

namespace Flame.Syntax.C
{
    public class SingleVariableDeclaration : ISyntaxNode
    {
        public const this(set IDeclaratorSyntax Declarator)
        {
            this.Operator = Token.Undefined;
            this.Value = null;
        }
        public const this(set IDeclaratorSyntax Declarator, set Token Operator, set IExpressionSyntax Value);

        public IDeclaratorSyntax Declarator { const get; private set; }
        public Token Operator { const get; private set; }
        public IExpressionSyntax Value { const get; private set; }

        public string Name { const get return Declarator.Name; }

        public const IVariable GetDeclaredVariable(ISyntaxState State)
        {
            return State.GetVariable(Name);
        }

        public const IStatement CreateStatement(ITypeSyntax VariableType, ISyntaxState State)
        {
            return CreateStatement(VariableType, State, null);
        }

        public const IStatement CreateStatement(ITypeSyntax VariableType, ISyntaxState State, IType TypeHint)
        {
        	var variable = CreateVariable(VariableType, State, TypeHint);
        	if (variable is AssignedVariable)
        	{
        		return ((AssignedVariable)variable).CreateStoreStatement();
        	}
        	else
        	{
        		return new EmptyStatement();
        	}
        }

        public const IVariable CreateVariable(ITypeSyntax VariableType, ISyntaxState State, IType TypeHint)
        {
        	bool varType;
        	if (VariableType == null)
        	{
        		varType = true;
        	}
        	else
        	{
        		varType = VariableType.IsVariable;
        	}
            IType type;
            if (varType && TypeHint != null)
            {
                type = TypeHint;
            }
            else
            {
                type = VariableType.CreateType(State);
                if (!varType && type == null)
                {
                	State.Log.LogError(new LogEntry("Type resolution error", "Type '" + VariableType.GetCode().Trim().ToString() + "' in variable declaration '" + this.GetCode().Trim().ToString() + "' could not be resolved", VariableType.GetSourceLocation()));
                }
            }

            if (Value == null)
            {
            	if (varType)
            	{
            		State.Log.LogError(new LogEntry("Type inference error", "Could not infer 'auto' type in variable declaration '" + this.GetCode().Trim().ToString() + "' as the variable was not initialized with an expression", VariableType.GetSourceLocation()));
            	}
                return State.DeclareVariable(Declarator.Name, Declarator.CreateType(type, (ICSyntaxState)State));
            }
            else
            {
                IVariable val = SyntaxExtensions.CreateVerifiedVariable(Value, State);

                if (varType && type == null)
                {
                	type = val.Type;
                }
                else if (CastSyntax.UseImplicitCast(State, val.Type, type))
                {
                	val = new ExpressionVariable(CastSyntax.CreateImplicitCast(State, val.CreateGetExpression(), Value, type));
                }

                var variable = State.DeclareVariable(Declarator.Name, Declarator.CreateType(type, (ICSyntaxState)State));
                return new AssignedVariable(variable, val);
            }
        }

        public override const string ToString()
        {
            return GetCode().ToString();
        }

        public const CodeBuilder GetCode()
        {
            var cb = new CodeBuilder();
            cb.Append(Declarator.GetCode());
            if (Value != null)
            {
                cb.Append(Operator.TokenValue);
                cb.Append(Value.GetCode());
            }
            return cb;
        }
    }
}
