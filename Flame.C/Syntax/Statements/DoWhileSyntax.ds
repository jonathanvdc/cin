using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler;
using Flame.Compiler.Statements;
using Flame.Compiler.Expressions;
using Flame.C.Lexer;

namespace Flame.Syntax.C
{
    public class DoWhileSyntax : IStatementSyntax, ISourceSyntax
    {
        public const this(set Token DoKeyword, set IStatementSyntax Body, set Token WhileKeyword,
            set Token LeadingParentheses, set IExpressionSyntax Condition, set Token TrailingParentheses,
            set Token Semicolon);

        public Token DoKeyword { const get; private set; }
        public IStatementSyntax Body { const get; private set; }
        public Token WhileKeyword { const get; private set; }
        public Token LeadingParentheses { const get; private set; }
        public IExpressionSyntax Condition { const get; private set; }
        public Token TrailingParentheses { const get; private set; }
        public Token Semicolon { const get; private set; }

        public SourceLocation Location
        {
            const get
            {
                return DoKeyword.Location.Concat(Body.GetSourceLocation())
                                         .Concat(WhileKeyword.Location)
                                         .Concat(LeadingParentheses.Location)
                                         .Concat(Condition.GetSourceLocation())
                                         .Concat(TrailingParentheses.Location)
                                         .Concat(Semicolon.Location);
            }
        }

        public const IStatement CreateStatement(ISyntaxState State) : IStatementSyntax.CreateStatement
        {
            State.PushScope();
            var cond = Condition.CreateExpression(State);
            var body = Body.CreateStatement(State);
            var cleanup = State.PopScope();
            var whileLoop = new DoWhileStatement(body, cond);
            IStatement[] statements = new IStatement[] { whileLoop, cleanup };
            return new BlockStatement(statements);
        }

        public const CodeBuilder GetCode() : IStatementSyntax.GetCode
        {
            CodeBuilder cb = new CodeBuilder();
            cb.Append(DoKeyword.ToString());
            cb.AppendLine();
            cb.Append(Body.GetCode());
            cb.AppendLine();
            cb.Append(LeadingParentheses.ToString());
            cb.Append(Condition.GetCode());
            cb.Append(TrailingParentheses.ToString());
            cb.Append(Semicolon.ToString());
            return cb;
        }

        public override const string ToString()
        {
        	return this.GetCode().ToString();
        }
    }
}
