using System;
using System.Collections.Generic;
using Flame.Compiler;
using Flame.Compiler.Statements;
using Flame.Compiler.Expressions;
using Flame.C.Lexer;

namespace Flame.Syntax.C
{
    public class IfElseSyntax : IStatementSyntax, ISourceSyntax
    {
        public const this(set Token IfKeyword,
            set Token LeadingParentheses, set IExpressionSyntax Condition, set Token TrailingParentheses,
            set IStatementSyntax IfBody)
        {
            this.ElseKeyword = new Token(TokenType.UNDEFINED, "");
            this.ElseBody = null;
        }
        public const this(set Token IfKeyword,
            set Token LeadingParentheses, set IExpressionSyntax Condition, set Token TrailingParentheses,
            set IStatementSyntax IfBody, set Token ElseKeyword, set IStatementSyntax ElseBody);

        public Token IfKeyword { const get; private set; }
        public Token LeadingParentheses { const get; private set; }
        public IExpressionSyntax Condition { const get; private set; }
        public Token TrailingParentheses { const get; private set; }
        public IStatementSyntax IfBody { const get; private set; }
        public Token ElseKeyword { const get; private set; }
        public IStatementSyntax ElseBody { const get; private set; }

        public SourceLocation Location
        {
            const get
            {
                var result = IfKeyword.Location.Concat(LeadingParentheses.Location)
                                               .Concat(Condition.GetSourceLocation())
                                               .Concat(TrailingParentheses.Location)
                                               .Concat(IfBody.GetSourceLocation());
                if (ElseBody != null)
                    result = result.Concat(ElseKeyword.Location)
                                   .Concat(ElseBody.GetSourceLocation());

                return result;
            }
        }

        public IStatement CreateStatement(ISyntaxState State)
        {
        	State.PushScope();
            var cond = Condition.CreateVerifiedExpression(State);
            var ifBody = IfBody.CreateStatement(State);
            var cleanup = State.PopScope();
            IStatement[] statements;
            if (ElseBody == null)
            {
            	if (ifBody.IsEmpty)
            		State.Log.LogWarning(new LogEntry("If block without body", "If block '" + IfKeyword.ToString().TrimStart(null) + LeadingParentheses.ToString() + Condition.GetCode().Trim().ToString() + TrailingParentheses.ToString().TrimEnd(null) + "' has an empty statement as its body", Location));
            	statements = new IStatement[] { new IfElseStatement(cond, ifBody), cleanup };
            }
            else
            {
                var elseBody = ElseBody.CreateStatement(State);
                statements = new IStatement[] { new IfElseStatement(cond, ifBody, elseBody), cleanup };
            }
            return new BlockStatement(statements);
        }

        public override string ToString()
        {
            return GetCode().ToString();
        }

        public CodeBuilder GetCode()
        {
            CodeBuilder cb = new CodeBuilder();
            cb.Append(IfKeyword.ToString());
            cb.Append(LeadingParentheses.ToString());
            cb.Append(Condition.GetCode());
            cb.Append(TrailingParentheses.ToString());
            cb.AppendLine();
            cb.Append(IfBody.GetCode());
            if (ElseBody != null)
            {
                cb.AppendLine();
                cb.Append(ElseKeyword.ToString());
                if (!(ElseBody is IfElseSyntax))
                {
                    cb.AppendLine();
                }
                cb.Append(ElseBody.GetCode());
            }
            return cb;
        }
    }
}
