using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.C.Lexer;

namespace Flame.Syntax.C
{
    public class PrefixDeltaSyntax : ISetVariableExpressionSyntax, ISourceSyntax
    {
        public const this(set Token Operator, set IVariableSyntax Variable);

        public Token Operator { const get; private set; }
        public IVariableSyntax Variable { const get; private set; }

        public SourceLocation Location
        {
        	const get return Operator.Location.Concat(Variable.GetSourceLocation());
        }

        public static const IStatement CreateSetStatement(IVariable Variable, Token Operator, ICompilerLog Log)
        {
            var getExpr = Variable.CreateGetExpression();
            IExpression val;
            if (Operator.Type == TokenType.PlusPlus)
            {
            	val = new AddExpression(getExpr, ConversionExpression.Create(new Int32Expression(1), Variable.Type));
            }
            else if (Operator.Type == TokenType.MinusMinus)
            {
            	val = new SubtractExpression(getExpr, ConversionExpression.Create(new Int32Expression(1), Variable.Type));
            }
            else
            {
            	Log.LogError("Expected ++ or --, not " + Operator.TokenValue + ".");
            	val = null;
            }
            return Variable.CreateSetStatement(val);
        }

        public IStatement CreateSetStatement(ISyntaxState State)
        {
            var variable = Variable.CreateVariable(State);
            return PrefixDeltaSyntax.CreateSetStatement(variable, Operator, State.Log);
        }

        public IExpression CreateExpression(ISyntaxState State)
        {
            var variable = Variable.CreateVariable(State);
            IStatement setStatement = CreateSetStatement(variable, Operator, State.Log);
            return new InitializedExpression(setStatement, variable.CreateGetExpression());
        }

        public override const string ToString()
        {
            return GetCode().ToString();
        }

        public const CodeBuilder GetCode()
        {
            CodeBuilder cb = new CodeBuilder();
            cb.Append(Operator.ToString());
            cb.Append(Variable.GetCode());
            return cb;
        }
    }
}
