using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.C.Lexer;

namespace Flame.Syntax.C
{
    public abstract class UnaryExpressionSyntax : IExpressionSyntax, ISourceSyntax
    {
    	protected const this();
        public const this(set Token Operator, set IExpressionSyntax Operand);

        public Token Operator { const get; protected set; }
        public IExpressionSyntax Operand { const get; protected set; }

        public SourceLocation Location
        {
        	const get return Operator.Location.Concat(Operand.GetSourceLocation());
        }

        protected abstract const IExpression CreateExpression(ISyntaxState State, Token Operator, IExpressionSyntax Operand);

        public const IExpression CreateExpression(ISyntaxState State)
        {
            return CreateExpression(State, Operator, Operand);
        }

        public override const string ToString()
        {
            return Operator.ToString() + Operand.GetCode().ToString();
        }

        public const CodeBuilder GetCode()
        {
            return new CodeBuilder(this.ToString());
        }
    }

}
