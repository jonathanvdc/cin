using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.Compiler.Variables;
using Flame.C.Lexer;

namespace Flame.Syntax.C
{
    public class IdentifierSyntax : VariableSyntaxBase, ISourceSyntax
    {
        public const this(string Identifier)
        {
        	this.Identifier = new Token(TokenType.Identifier, Identifier);
        }
        public const this(set Token Identifier);

        public Token Identifier { const get; private set; }

        public SourceLocation Location
        {
        	const get return Identifier.Location;
        }

        private static IField GetEnumField(string Name, ISyntaxState State)
        {
            foreach (var item in ((ICSyntaxState)State).Scope.AllEnumTypes)
            {
                foreach (var field in item.Fields)
                    if (field.Name.Equals(Name))
                {
                    return field;
                }
            }
            return null;
        }

        public override const IVariable CreateVariable(ISyntaxState State)
        {
            string name = Identifier.TokenValue;

            var local = State.GetVariable(name);
            if (local != null)
                return local;

            var members = State.MemberProvider.GetMembers(State.CurrentType, name);

            var field = Enumerable.OfType<IField>(members).GetField(name, true);
            if (field != null)
                return new FieldVariable(field, null);

            var method = Enumerable.SingleOrDefault<IMethod>(Enumerable.OfType<IMethod>(members));
            if (method != null)
                return new ExpressionVariable(new GetMethodExpression(method, null));

            var enumField = GetEnumField(name, State);
            if (enumField != null)
                return new FieldVariable(enumField, null);

            return null;
        }

        public override const string ToString()
        {
            return Identifier.ToString();
        }

        public override const CodeBuilder GetCode()
        {
            return new CodeBuilder(Identifier.ToString());
        }
    }
}
