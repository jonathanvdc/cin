using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.C.Lexer;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Pixie;

namespace Flame.Syntax.C
{
    public class CastSyntax : IExpressionSyntax, ISourceSyntax
    {
        public const this(set ITypeSyntax TargetType, set IExpressionSyntax Expression)
        {
            this.OpeningToken = new Token(TokenType.RParen, "(");
            this.ClosingToken = new Token(TokenType.LParen, ")");
        }
        public const this(set Token OpeningToken, set ITypeSyntax TargetType, set Token ClosingToken, set IExpressionSyntax Expression);

        public Token OpeningToken { const get; private set; }
        public ITypeSyntax TargetType { const get; private set; }
        public Token ClosingToken { const get; private set; }
        public IExpressionSyntax Expression { const get; private set; }

        public SourceLocation Location
        {
        	const get return CastLocation.Concat(Expression.GetSourceLocation());
        }

        public SourceLocation CastLocation
        {
        	const get return OpeningToken.Location.Concat(TargetType.GetSourceLocation()).Concat(ClosingToken.Location);
        }

        public const IExpression CreateExpression(ISyntaxState State)
        {
        	var expr = Expression.CreateVerifiedExpression(State);
        	var type = TargetType.CreateVerifiedType(State);
        	var exprType = expr.Type;
        	if (exprType.IsBit && type.IsBit)
        	{
	       		if (exprType.GetPrimitiveMagnitude() > type.GetPrimitiveMagnitude())
	       		{
	       			State.Log.LogWarning(new LogEntry("Bit type downcast", "'" + this.GetCode().Trim().ToString() + "' implies a downcast of bit types (" + State.TypeNamer.Convert(exprType) + " to " + State.TypeNamer.Convert(type) + "). This could lead to an arbitrary loss of information.", CastLocation));
	       		}
	       	}
	       	else if (exprType.Equals(type))
	       	{
	       		State.Log.LogWarning(new LogEntry("Meaningless cast", "'" + this.GetCode().Trim().ToString() + "' does not change the type of expression '" + Expression.GetCode().Trim().ToString() + "'.", CastLocation));
	       	}
            return ConversionExpression.Create(expr, type);
        }

        public override const string ToString()
        {
            return GetCode().ToString();
        }

        public const CodeBuilder GetCode()
        {
            var cb = new CodeBuilder();
            cb.Append(OpeningToken.ToString());
            cb.Append(TargetType.GetCode());
            cb.Append(ClosingToken.ToString());
            cb.Append(Expression.GetCode());
            return cb;
        }

        #region Static

        public static const IExpression CreateImplicitCast(ISyntaxState State, IExpressionSyntax Value, IType TargetType)
        {
        	var expr = Value.CreateVerifiedExpression(State);
        	return CastSyntax.CreateImplicitCast(State, expr, Value, TargetType);
        }

        public static const IExpression CreateImplicitCast(ISyntaxState State, IExpression expr, ISyntaxNode Value, IType TargetType)
        {
        	var valType = expr.Type;
        	if (valType.IsEquivalent(TargetType))
        	{
        		return expr;
        	}
        	else if (CastSyntax.UseImplicitCast(State, valType, TargetType))
        	{
        		return ConversionExpression.Create(expr, TargetType);
        	}
        	else
        	{
                var diffBuilder = new TypeDiffComparer(State.TypeNamer);
                var leftDiff = diffBuilder.Compare(TargetType, valType);
                var rightDiff = diffBuilder.Compare(valType, TargetType);
                var nodes = new List<MarkupNode>();
                nodes.Add(TypeDiffComparer.ToTextNode("expression '"));
                nodes.Add(TypeDiffComparer.ToTextNode(Value.GetCode().ToString()));
                nodes.Add(TypeDiffComparer.ToTextNode("' of type '"));
                nodes.Add(leftDiff);
                nodes.Add(TypeDiffComparer.ToTextNode("' could not be cast implicitly to '"));
                nodes.Add(rightDiff);
                nodes.Add(TypeDiffComparer.ToTextNode("'"));
                var message = new MarkupNode("entry", nodes);

        		State.Log.LogError(new LogEntry("cast error", message, Value.GetSourceLocation()));
        		return ConversionExpression.Create(expr, TargetType);
        	}
        }

        public static const bool UseImplicitCast(ISyntaxState State, IType SourceType, IType TargetType)
        {
        	if (SourceType.Is(TargetType))
        	{
        		return true;
        	}
        	else if (SourceType.IsVector && TargetType.IsArray)
        	{
        		return SourceType.AsContainerType().ElementType.Is(TargetType.AsContainerType().ElementType) && SourceType.AsContainerType().AsVectorType().Dimensions.Count == TargetType.AsContainerType().AsArrayType().ArrayRank;
        	}
        	if (SourceType.IsPrimitive && TargetType.IsPrimitive)
        	{
        		if (SourceType.GetPrimitiveMagnitude() <= TargetType.GetPrimitiveMagnitude())
        		{
        			if (SourceType.IsSignedInteger)
        			{
					 	return TargetType.IsSignedInteger || TargetType.IsFloatingPoint;
					}
        			else if (SourceType.IsUnsignedInteger)
					{
						if (TargetType.IsUnsignedInteger || TargetType.IsFloatingPoint)
        					return true;
        				else if (TargetType.IsSignedInteger)
        					return SourceType.GetPrimitiveMagnitude() < TargetType.GetPrimitiveMagnitude();
        				else
        					return false;
        			}
        			else if (SourceType.IsBit && TargetType.IsBit)
        			{
        				return true;
        			}
        			else if (SourceType.IsFloatingPoint && TargetType.IsFloatingPoint)
        			{
        				return true;
        			}
        			else
        			{
        				return false;
        			}
        		}
        	}
        	return false;
        }

        #endregion
    }
}
