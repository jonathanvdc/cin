using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.C.Lexer;

namespace Flame.Syntax.C
{
    public class StringSyntax : LiteralSyntax
    {
        public const this(string Value)
        {
        	this.Value = CreateStringToken(Value);
        }
        public const this(set Token Value);

        #region Static

        static this()
        {
            escapeSequences = new Dictionary<string, string>();
            escapeSequences["\\\\"] = "\\";
            escapeSequences["\\\""] = "\"";
            escapeSequences["\\\'"] = "\'";
            escapeSequences["\\n"] = "\n";
            escapeSequences["\\t"] = "\t";
            escapeSequences["\\r"] = "\r";
            escapeSequences["\\b"] = "\b";
            escapeSequences["\\a"] = "\a";
            escapeSequences["\\f"] = "\f";
            escapeSequences["\\v"] = "\v";
            escapeSequences["\\0"] = "\0";
        }

        private static Dictionary<string, string> escapeSequences;

        public static IDictionary<string, string> GetEscapeSequenceMapping()
        {
            return escapeSequences;
        }

        public static const Token CreateStringToken(string Value)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append(Value);
            foreach (var item in StringSyntax.escapeSequences)
            {
                if (item.Value != "'")
                {
                    sb.Replace(item.Value, item.Key);
                }
            }
            sb.Insert(0, '"');
            sb.Append('"');
            return new Token(TokenType.String, sb.ToString());
        }

        public static const string ExtractStringFromToken(Token Token)
        {
            string original = Token.TokenValue;
            StringBuilder sb = new StringBuilder();
            sb.Append(original.Substring(1, original.Length - 2));
            int i = 0;
            while (i < sb.Length)
            {
                if (sb[i] == '\\')
                {
                    string sequence = sb.ToString(i, 2);
                    string result = StringSyntax.escapeSequences[sequence];
                    sb.Remove(i, 2);
                    sb.Insert(i, result);
                    i += result.Length;
                }
                else
                {
                    ++i;
                }
            }
            return sb.ToString();
        }

        #endregion

        protected override IExpression CreateExpression(ISyntaxState State, Token Value)
        {
            string original = Value.TokenValue;

            return new StringExpression(ExtractStringFromToken(Value));
        }
    }
}
