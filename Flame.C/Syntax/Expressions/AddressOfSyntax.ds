using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.C.Lexer;

namespace Flame.Syntax.C
{
    public class AddressOfSyntax : IExpressionSyntax, ISourceSyntax
    {
        public const this(set IVariableSyntax Operand)
        {
        	this.Operator = new Token(TokenType.And, "&");
        }
        public const this(set Token Operator, set IVariableSyntax Operand);

        public Token Operator { const get; private set; }
        public IVariableSyntax Operand { const get; private set; }

        public SourceLocation Location
        {
        	const get return Operator.Location.Concat(Operand.GetSourceLocation());
        }

        public const IExpression CreateExpression(ISyntaxState State)
        {
            var variable = Operand.CreateVariable(State);
            var addrOf = ((IUnmanagedVariable)variable).CreateAddressOfExpression();
            return ConversionExpression.Create(addrOf, variable.Type.MakePointerType(PointerKind.TransientPointer));
        }

        public override const string ToString()
        {
            return Operator.ToString() + Operand.GetCode().ToString();
        }

        public const CodeBuilder GetCode()
        {
            return new CodeBuilder(this.ToString());
        }
    }
}
