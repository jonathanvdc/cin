using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Build;
using Flame.Compiler;
using Flame.C.Build;
using Pixie;

namespace Flame.Syntax.C
{
    public class DeclarationScope
    {
        public const this(set CompilationUnit Unit)
        {
            methods = new Dictionary<string, SyntaxFunction>();
            fields = new Dictionary<string, SyntaxField>();
            structs = new Dictionary<string, SyntaxStruct>();
            enums = new Dictionary<string, SyntaxEnum>();
            typedefs = new Dictionary<string, SyntaxTypedef>();
            allMethods = new Dictionary<string, IMethod>();
            allFields = new Dictionary<string, IField>();
            allStructs = new Dictionary<string, SyntaxStruct>();
            allEnums = new Dictionary<string, SyntaxEnum>();
            allTypedefs = new Dictionary<string, SyntaxTypedef>();
            anonymousEnums = new List<SyntaxEnum>();
        }
        public const this(set CompilationUnit Unit, set DeclarationScope Parent)
        {
            methods = new Dictionary<string, SyntaxFunction>();
            fields = new Dictionary<string, SyntaxField>();
            structs = new Dictionary<string, SyntaxStruct>();
            enums = new Dictionary<string, SyntaxEnum>();
            typedefs = new Dictionary<string, SyntaxTypedef>();
            allMethods = new Dictionary<string, IMethod>(Parent.allMethods);
            allFields = new Dictionary<string, IField>(Parent.allFields);
            allStructs = new Dictionary<string, SyntaxStruct>(Parent.allStructs);
            allEnums = new Dictionary<string, SyntaxEnum>(Parent.allEnums);
            allTypedefs = new Dictionary<string, SyntaxTypedef>(Parent.allTypedefs);
            anonymousEnums = new List<SyntaxEnum>(Parent.anonymousEnums);
        }

        public CompilationUnit Unit { const get; private set; }
        public DeclarationScope Parent { const get; private set; }

        public bool IsRoot { const get return Parent == null; }

        private Dictionary<string, SyntaxFunction> methods;
        private Dictionary<string, SyntaxField> fields;
        private Dictionary<string, SyntaxStruct> structs;
        private Dictionary<string, SyntaxEnum> enums;
        private Dictionary<string, SyntaxTypedef> typedefs;
        private Dictionary<string, IField> allFields;
        private Dictionary<string, IMethod> allMethods;
        private Dictionary<string, SyntaxStruct> allStructs;
        private Dictionary<string, SyntaxEnum> allEnums;
        private Dictionary<string, SyntaxTypedef> allTypedefs;
        private List<SyntaxEnum> anonymousEnums;

        public static const IMarkupNode CreateRedefinitionNode(string Name,
            SourceLocation NewDefinition, SourceLocation OldDefinition)
        {
            return RedefinitionHelpers.CreateRedefinitionNode(Name, NewDefinition, OldDefinition);
        }

        public IMethod Declare(SyntaxFunction Method)
        {
            string name = Method.Name;
            if (!methods.ContainsKey(name))
            {
                Unit.DeclareGlobal(Method);
                methods[name] = Method;
                allMethods[name] = Method;
            }
            else if (Method.IsDefinition)
            {
                methods[name].MakeDefinition(Method);
            }
            return methods[name];
        }

        public IField Declare(SyntaxField Field)
        {
            string name = Field.Name;
            if (!fields.ContainsKey(name))
            {
                Unit.DeclareGlobal(Field);
                fields[name] = Field;
                allFields[name] = Field;
            }
            else if (Field.IsDefinition)
            {
                fields[name].MakeDefinition(Field);
            }
            return fields[name];
        }

        private void Define<T>(IDefinableType<T> Declaration, IDefinableType<T> Definition)
            where T : ISyntaxNode
        {
            if (Definition.IsDefinition)
            {
                if (Declaration.IsDefinition)
                {
                    Unit.Assembly.Log.LogError(new LogEntry("Type redefinition",
                        CreateRedefinitionNode(Definition.LocalName,
                            Definition.DefinitionSyntax.GetSourceLocation(),
                            Declaration.DefinitionSyntax.GetSourceLocation())));
                }
                Declaration.MakeDefinition(Definition.DefinitionSyntax);
                Declaration.ApplyDefinition();
            }
        }

        private T DeclareGeneric<T, TSyntax>(T Type, Dictionary<string, T> Locals, Dictionary<string, T> Globals)
            where TSyntax : ISyntaxNode
            where T : IRenamableType
        {
            if (Type.IsAnonymous || Type.IsDefinition)
            {
                return DeclareNew<T, TSyntax>(Type, Locals, Globals);
            }

            string name = Type.TypeName;
            if (Globals.ContainsKey(name))
            {
                var result = Globals[name];
                this.Define<TSyntax>((IDefinableType<TSyntax>)result, (IDefinableType<TSyntax>)Type);
                return result;
            }

            return this.DeclareNew<T, TSyntax>(Type, Locals, Globals);
        }

        private T DeclareNew<T, TSyntax>(T Type, Dictionary<string, T> Locals, Dictionary<string, T> Globals)
            where TSyntax : ISyntaxNode
            where T : IRenamableType
        {
            if (Type.IsAnonymous)
            {
                Unit.DeclareGlobal(Type);
                return Type;
            }

            string name = Type.TypeName;
            if (!Locals.ContainsKey(name))
            {
                Locals[name] = Type;
                Globals[name] = Type;
                Unit.DeclareGlobal(Type);
            }
            else
            {
                this.Define<TSyntax>((IDefinableType<TSyntax>)Locals[name], (IDefinableType<TSyntax>)Type);
            }
            return Locals[name];
        }

        public SyntaxStruct Declare(SyntaxStruct Type)
        {
            return this.DeclareGeneric<SyntaxStruct, StructDefinitionSyntax>(Type, structs, allStructs);
        }

        public SyntaxEnum Declare(SyntaxEnum Type)
        {
            if (Type.IsAnonymous)
            {
                return DeclareNew(Type);
            }

            return this.DeclareGeneric<SyntaxEnum, EnumDefinitionSyntax>(Type, enums, allEnums);
        }

        public SyntaxStruct DeclareNew(SyntaxStruct Type)
        {
            return this.DeclareNew<SyntaxStruct, StructDefinitionSyntax>(Type, structs, allStructs);
        }

        public SyntaxEnum DeclareNew(SyntaxEnum Type)
        {
            if (Type.IsAnonymous)
            {
                Unit.DeclareGlobal(Type);
                anonymousEnums.Add(Type);
                return Type;
            }

            return this.DeclareNew<SyntaxEnum, EnumDefinitionSyntax>(Type, enums, allEnums);
        }

        public IType Declare(SyntaxTypedef Typedef)
        {
            string name = Typedef.Name;
            if (typedefs.ContainsKey(name))
            {
                var old = typedefs[name];
                if (old.Type.Equals(Typedef.Type))
                {
                    Typedef = old;
                }
                else
                {
                    Unit.Assembly.Log.LogError(new LogEntry("Typedef redefinition with different types",
                        CreateRedefinitionNode(Typedef.LocalName,
                            Typedef.DeclaratorSyntax.GetSourceLocation(),
                            old.DeclaratorSyntax.GetSourceLocation())));
                }
            }
            typedefs[name] = Typedef;
            allTypedefs[name] = Typedef;
            return Typedef;
        }

        public [IField] LocalFields { const get return fields.Values; }
        public [IMethod] LocalFunctions { const get return methods.Values; }
        public [ICType] LocalTypes
        {
            const get
                return Enumerable.Concat<ICType>(
                        Enumerable.Concat<ICType>(
                            structs.Values,
                            enums.Values),
                            typedefs.Values);
        }

        public [IField] AllFields { const get return allFields.Values; }
        public [IMethod] AllFunctions { const get return allMethods.Values; }
        public [ICType] AllEnumTypes
        {
            const get
                return Enumerable.Concat<ICType>(allEnums.Values, anonymousEnums);
        }
        public [ICType] AllTypes
        {
            const get
            return Enumerable.Concat<ICType>(
                    Enumerable.Concat<ICType>(
                        allStructs.Values,
                        allEnums.Values),
                        allTypedefs.Values);
        }
    }
}
