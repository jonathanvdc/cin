using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Build;
using Flame.Compiler;
using Flame.C.Build;

namespace Flame.Syntax.C
{
    public class DeclarationScope
    {
        public const this(set CompilationUnit Unit)
        {
            methods = new Dictionary<string, SyntaxFunction>();
            fields = new Dictionary<string, SyntaxField>();
            structs = new Dictionary<string, SyntaxStruct>();
            allMethods = new Dictionary<string, IMethod>();
            allFields = new Dictionary<string, IField>();
            allTypes = new Dictionary<string, ICType>();
        }
        public const this(set CompilationUnit Unit, set DeclarationScope Parent)
        {
            methods = new Dictionary<string, SyntaxFunction>();
            fields = new Dictionary<string, SyntaxField>();
            structs = new Dictionary<string, SyntaxStruct>();
            allMethods = new Dictionary<string, IMethod>(Parent.allMethods);
            allFields = new Dictionary<string, IField>(Parent.allFields);
            allTypes = new Dictionary<string, ICType>(Parent.allTypes);
        }

        public CompilationUnit Unit { const get; private set; }
        public DeclarationScope Parent { const get; private set; }

        public bool IsRoot { const get return Parent == null; }

        private Dictionary<string, SyntaxFunction> methods;
        private Dictionary<string, SyntaxField> fields;
        private Dictionary<string, SyntaxStruct> structs;
        private Dictionary<string, IField> allFields;
        private Dictionary<string, IMethod> allMethods;
        private Dictionary<string, ICType> allTypes;

        public IMethod Declare(SyntaxFunction Method)
        {
            string name = Method.Name;
            if (!methods.ContainsKey(name))
            {
                Unit.DeclareGlobal(Method);
                methods[name] = Method;
                allMethods[name] = Method;
            }
            else if (Method.IsDefinition)
            {
                methods[name].MakeDefinition(Method);
            }
            return methods[name];
        }

        public IField Declare(SyntaxField Field)
        {
            string name = Field.Name;
            if (!fields.ContainsKey(name))
            {
                Unit.DeclareGlobal(Field);
                fields[name] = Field;
                allFields[name] = Field;
            }
            else if (Field.IsDefinition)
            {
                fields[name].MakeDefinition(Field);
            }
            return fields[name];
        }

        public IType Declare(SyntaxStruct Type)
        {
            if (Type.IsAnonymous)
            {
                Unit.DeclareGlobal(Type);
                return Type;
            }

            string name = Type.TypeName;
            if (!structs.ContainsKey(name))
            {
                Unit.DeclareGlobal(Type);
                structs[name] = Type;
                allTypes[name] = Type;
            }
            else if (Type.IsDefinition)
            {
                var target = structs[name];
                if (target.IsDefinition)
                {
                    Unit.Assembly.Log.LogError(new LogEntry("Type redefinition",
                        "'" + Type.LocalName + "' is defined twice.",
                        Type.DefinitionSyntax.GetSourceLocation()));
                }
                target.MakeDefinition(Type);
            }
            var result = structs[name];
            return result;
        }

        public [IField] LocalFields { const get return fields.Values; }
        public [IMethod] LocalFunctions { const get return methods.Values; }
        public [ICType] LocalTypes { const get return structs.Values; }

        public [IField] AllFields { const get return allFields.Values; }
        public [IMethod] AllFunctions { const get return allMethods.Values; }
        public [ICType] AllTypes { const get return allTypes.Values; }
    }
}
