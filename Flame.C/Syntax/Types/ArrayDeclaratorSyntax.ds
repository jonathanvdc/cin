using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.C.Lexer;

namespace Flame.Syntax.C
{
    public class ArrayDeclaratorSyntax : IDeclaratorSyntax, ISourceSyntax
    {
        public const this(set IDeclaratorSyntax Declarator,
            set Token LeadingBracket, set IExpressionSyntax Length, set Token TrailingBracket);


        public IDeclaratorSyntax Declarator { const get; private set; }
        public Token LeadingBracket { const get; private set; }
        public IExpressionSyntax Length { const get; private set; }
        public Token TrailingBracket { const get; private set; }

        public string Name { const get return Declarator.Name; }

        public SourceLocation Location
        {
            const get return Declarator.GetSourceLocation()
                                       .Concat(LeadingBracket.Location)
                                       .Concat(Length.GetSourceLocation())
                                       .Concat(TrailingBracket.Location);
        }

        private IType CreateArrayType(IType Type, ICSyntaxState State)
        {
            var sizeExpr = Length.CreateVerifiedExpression(State);
            if (sizeExpr.IsConstant && sizeExpr.Type.Equals(PrimitiveTypes.Int32))
            {
                var boundSize = sizeExpr.Evaluate();
                if (boundSize != null)
                {
                    int size = boundSize.GetValue<int>();
                    return Type.MakeVectorType(new int[] { size });
                }
            }
            return Type.MakeArrayType(1);
        }

        public IExpression GetSize(IType ElementType, ICSyntaxState State)
        {
            return new MultiplyExpression(Length.CreateVerifiedExpression(State),
                Declarator.GetSize(ElementType, State));
        }

        public IType CreateType(IType Type, ICSyntaxState State)
        {
            var arrType = CreateArrayType(Type, State);
            return Declarator.CreateType(arrType, State);
        }

        public override const string ToString()
        {
            return this.GetCode().ToString();
        }

        public const CodeBuilder GetCode()
        {
            var cb = new CodeBuilder();
            cb.Append(Declarator.GetCode());
            cb.Append(LeadingBracket.ToString());
            cb.Append(Length.GetCode());
            cb.Append(TrailingBracket.ToString());
            return cb;
        }
    }
}
