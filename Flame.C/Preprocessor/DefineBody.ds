using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Compiler;
using Flame.Syntax;
using Flame.C.Lexer;
using Flame.Syntax.C;

namespace Flame.C.Preprocessor
{
    public struct DefineBodyChunk
    {
        public const this(set Token[] Source, set int ParameterIndex);
        public const this(set Token[] Source)
        {
            this.ParameterIndex = -1;
        }

        public int ParameterIndex { const get; private set; }
        public Token[] Source { const get; private set; }

        public SourceLocation Location
        {
            const get
            {
                var result = Source[0].Location;
                for (int i = 1; i < Source.Length; i++)
                {
                    result = result.Concat(Source[i].Location);
                }
                return result;
            }
        }

        public const Token[] Substitute(Token[][] Arguments)
        {
            if (ParameterIndex < 0 || ParameterIndex >= Arguments.Length)
            {
                return Source;
            }
            else
            {
                return Arguments[ParameterIndex];
            }
        }
    }

    public class DefineBody : ISourceSyntax
    {
        public const this(set [DefineBodyChunk] Chunks);

        public [DefineBodyChunk] Chunks { const get; private set; }

        public SourceLocation Location
        {
            const get
            {
                var firstChunk = Enumerable.FirstOrDefault<DefineBodyChunk>(Chunks);

                if (firstChunk == null)
                {
                    return null;
                }

                var result = firstChunk.Location;
                foreach (var item in Chunks)
                {
                    result = result.Concat(item.Location);
                }
                return result;
            }
        }

        public const Token[] Substitute(Token[][] Arguments)
        {
            var results = new List<Token>();
            foreach (var item in Chunks)
            {
                results.AddRange(item.Substitute(Arguments));
            }
            return results.ToArray();
        }

        public CodeBuilder GetCode()
        {
            var cb = new CodeBuilder();
            foreach (var item in Chunks)
            {
                foreach (var src in item.Source)
                {
                    cb.Append(src.ToString());
                }
            }
            return cb;
        }
    }
}
