using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler;
using Flame.C.Lexer;

namespace Flame.C.Preprocessor
{
    public class PreprocessorInstance
    {
        public const this(set ITokenStream Reader, PreprocessorEnvironment Environment, ISourceFile File)
        {
            this.State = new PreprocessorState(Environment, File);
            this.Builder = new TokenStreamBuilder();
            this.ifBlocks = new Stack<bool>();
            PushIf(true);
        }
        public const this(set ITokenStream Reader, set PreprocessorState State)
        {
            this.Builder = new TokenStreamBuilder();
            this.ifBlocks = new Stack<bool>();
            PushIf(true);
        }

        public PreprocessorState State { const get; private set; }
        public ITokenStream Reader { const get; private set; }
        public TokenStreamBuilder Builder { const get; private set; }

        public PreprocessorEnvironment Environment { const get return State.Environment; }

        private Stack<bool> ifBlocks;
        public bool IgnoreInput
        {
            const get
            {
                foreach (var item in ifBlocks)
                    if (!item)
                {
                    return true;
                }
                return false;
            }
        }

        public void PushIf(bool Value)
        {
            ifBlocks.Push(Value);
        }
        public bool PopIf()
        {
            return ifBlocks.Pop();
        }

        private void ProcessMacro(DefineDirective Directive)
        {
            var args = ReadMacroArguments(Directive);
            var chunkReader = new MemoryTokenStream(Directive.Body.Substitute(args));
            Builder.Append(State.Expand(chunkReader));
        }

        private Token[][] ReadMacroArguments(DefineDirective Directive)
        {
            if (Directive.HasParameters)
            {
                var args = Reader.ReadMacroArguments();
                var expandedArgs = new Token[][args.Length];
                foreach (var input in args, var output in expandedArgs)
                {
                    output = State.Expand(input).ToTokens();
                }
                return expandedArgs;
            }
            else
            {
                return new Token[][] { };
            }
        }

        private void ProcessToken(Token Value)
        {
            foreach (var item in State.Definitions)
            {
                if (Value.TokenValue.Equals(item.Name))
                {
                    ProcessMacro(item);
                    return;
                }
            }
            Builder.Append(Value);
        }

        private void ProcessItem()
        {
            var val = Reader.Next();
            if (val.Type == TokenType.Hash)
            {
                ProcessDirective(val);
            }
            else if (!IgnoreInput)
            {
                if (val.Type == TokenType.DefinedKeyword)
                {
                    ProcessDefined(val);
                }
                else
                {
                    ProcessToken(val);
                }
            }
        }

        private void ProcessDirective(Token HashToken)
        {
            var name = Reader.NextNoTrivia(TokenType.Identifier, Environment.Log);

            // Now parse the body
            var body = Reader.ReadLine();

            var parser = Environment.GetParser(name.TokenValue);
            if (parser == null)
            {
                Environment.Log.LogWarning(new LogEntry("Unknown preprocessor directive",
                    "Preprocessor directive '#" + name.TokenValue + "' was not recognized.",
                    HashToken.Location.Concat(name.Location)));
            }
            else
            {
                var directive = parser.Parse(HashToken, name, State, body);
                if (directive == null)
                {
                    Environment.Log.LogWarning(new LogEntry("Could not apply directive",
                        "Preprocessor directive '#" + name.TokenValue + "' could not be applied.",
                        HashToken.Location.Concat(name.Location)));
                }
                else
                {
                    directive.Apply(this);
                }
            }
        }

        private void ProcessDefined(Token DefinedToken)
        {
            string ident;
            SourceLocation loc;
            if (Reader.PeekNoTrivia().Type == TokenType.RParen)
            {
                var openingParen = Reader.NextNoTrivia();
                var identToken = Reader.NextNoTrivia(TokenType.Identifier, State.Environment.Log);
                var closingParen = Reader.NextNoTrivia(TokenType.LParen, State.Environment.Log);
                ident = identToken.TokenValue;
                loc = openingParen.Location.Concat(identToken.Location).Concat(closingParen.Location);
            }
            else
            {
                var identToken = Reader.NextNoTrivia(TokenType.Identifier, State.Environment.Log);
                ident = identToken.TokenValue;
                loc = identToken.Location;
            }
            if (State.IsDefined(ident))
            {
                Builder.Append(new Token(TokenType.TrueLiteral, "true", DefinedToken.Location.Concat(loc)));
            }
            else
            {
                Builder.Append(new Token(TokenType.FalseLiteral, "false", DefinedToken.Location.Concat(loc)));
            }
        }

        public void Process()
        {
            while (!Reader.IsEmpty)
            {
                ProcessItem();
            }
        }

        public void Include(ISourceFile File)
        {
            if (!State.Includes.IsIncludeOnce(File))
            {
                State.Includes.PushInclude(File);
                Builder.Append(State.Expand(File.GetDocument()));
                State.Includes.PopInclude();
            }
        }

        public void Import(ISourceFile File)
        {
            if (!State.Includes.IsIncludeOnce(File))
            {
                State.Includes.PushInclude(File);
                State.Includes.MarkIncludeOnce();
                Builder.Append(State.Expand(File.GetDocument()));
                State.Includes.PopInclude();
            }
        }
    }
}
