using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler;
using Flame.Syntax;
using Flame.C.Lexer;
using Flame.Syntax.C;

namespace Flame.C.Preprocessor
{
    public class DefineDirective : IDirective, ISourceSyntax
    {
        public const this(set Token HashToken, set Token DefineToken, set Token NameToken,
            set Token[] Parameters, set DefineBody Body);

        public Token HashToken { const get; private set; }
        public Token DefineToken { const get; private set; }
        public Token NameToken { const get; private set; }
        public Token[] Parameters { const get; private set; }
        public DefineBody Body { const get; private set; }

        public SourceLocation Location
        {
            const get
            {
                var result = HashToken.Location
                                      .Concat(DefineToken.Location)
                                      .Concat(NameToken.Location);
                foreach (var item in Parameters)
                {
                    result = result.Concat(item.Location);
                }
                return result.Concat(Body.Location);
            }
        }

        public string Name { const get return NameToken.TokenValue; }

        public string[] ParameterNames
        {
            const get
            {
                var results = new string[Parameters.Length];
                foreach (var input in Parameters, var output in results)
                {
                    output = input.TokenValue;
                }
                return results;
            }
        }

        public bool HasParameters
        {
            const get return Parameters.Length > 0;
        }

        public void Apply(PreprocessorInstance Processor)
        {
            Processor.State.Define(this);
        }

        public override const string ToString()
        {
            return GetCode().ToString();
        }

        public CodeBuilder GetCode()
        {
            var cb = new CodeBuilder();
            cb.Append(HashToken.ToString());
            cb.Append(DefineToken.ToString());
            cb.Append(Name.ToString());
            if (HasParameters)
            {
                cb.Append('(');
                for (int i = 0; i < Parameters.Length; i++)
                {
                    if (i > 0)
                    {
                        cb.Append(", ");
                    }
                    cb.Append(Parameters[i].ToString());
                }
                cb.Append(')');
            }
            cb.Append(' ');
            cb.Append(Body.GetCode());
            return cb;
        }
    }
}
