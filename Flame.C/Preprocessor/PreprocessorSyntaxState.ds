using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame.Build;
using Flame.Binding;
using Flame.Compiler;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;
using Flame.C;
using Flame.C.Build;
using Flame.C.Lexer;
using Flame.Syntax;
using Flame.Syntax.C;

namespace Flame.C.Preprocessor
{
    public class PreprocessorSyntaxState : ISyntaxState
    {
        public const this(PreprocessorState State)
        {
            this.Log = State.Environment.Log;
            this.Method = new DescribedMethod("preprocessor", null);
            this.Binder = new ScopedBinder(EmptyBinder, this);
            this.MemberProvider = new MemberProvider(Binder);
            this.TypeNamer = new TypeNamerBase();
            PushScope();
        }
        public const this(set ICompilerLog Log)
        {
            this.Method = new DescribedMethod("preprocessor", null);
            this.Binder = new ScopedBinder(EmptyBinder, this);
            this.MemberProvider = new MemberProvider(Binder);
            this.TypeNamer = new TypeNamerBase();
            PushScope();
        }

        public IType CurrentType
        {
            get { return Method.DeclaringType.MakeGenericType(Method.DeclaringType.GenericParameters); }
        }

        public IMethod Method { const get; private set; }
        public IScopedBinder Binder { const get; private set; }
        public IConverter<IType, string> TypeNamer { const get; private set; }
        public IMemberProvider MemberProvider { const get; private set; }
        public ICompilerLog Log { const get; private set; }

        public IType ReturnType
        {
            get { return Method.ReturnType; }
        }
        public IType DeclaringType
        {
            get { return Method.DeclaringType; }
        }
        public IVariable DeclareVariable(string Name, IVariable Variable, SourceLocation Location)
        {
            Log.LogError(new LogEntry("invalid preprocessor usage", "the preprocessor cannot declare variables.", Location));
            return null;
        }
        public IVariable GetVariable(string Name)
        {
            return new ExpressionVariable(new Int32Expression(0));
        }
        public DeclaredVariable GetDeclaredVariable(string Name)
        {
            return new DeclaredVariable(GetVariable(Name), null);
        }
        public const bool VariableExists(string Name)
        {
            return false;
        }

        public UniqueTag Tag { get { return null; } }

        public void PushScope()
        {
        }

        public void PushScope(UniqueTag Tag)
        {
        }

        public IStatement PopScope()
        {
            return new EmptyStatement();
        }
    }
}
