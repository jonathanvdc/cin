using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler;
using Flame.C.Build;
using Flame.C.Lexer;

namespace Flame.C.Preprocessor
{
    public static class SourceReaderExtensions
    {
        public static const bool IsWhitespace(char Value)
        {
            return Value == ' ' || Value == '\n' || Value == '\t' || Value == '\r';
        }

        public static const bool IsIdentifierElement(char Value)
        {
            return char.IsLetterOrDigit(Value) || Value == '_';
        }

        public static const bool IsIdentifierFirstElement(char Value)
        {
            return char.IsLetter(Value) || Value == '_';
        }

        public static const bool IsNumberToken(char Value)
        {
            return char.IsDigit(Value) || Value == '.' || Value == 'e' || Value == 'E' || Value == 'f' || Value == 'F';
        }

        public static const bool IsHexIntegerStart(string Value)
        {
            return Value[0] == '0' && (Value[1] == 'x' || Value[1] == 'X');
        }

        public static const bool IsBinaryIntegerStart(string Value)
        {
            return Value[0] == '0' && (Value[1] == 'b' || Value[1] == 'B');
        }

        public static void MoveNext(this ISourceReader Reader)
        {
            Reader.Advance(1);
        }

        public static void MovePrevious(this ISourceReader Reader)
        {
            Reader.Advance(-1);
        }

        public static string PeekString(this ISourceReader Reader, int Length)
        {
            var sb = new StringBuilder();
            for (int i = 0; i < Length && !Reader.IsEmpty; i++)
            {
                sb.Append(Reader.Read());
            }
            Reader.Advance(-sb.Length);
            return sb.ToString();
        }

        public static void ReadTo(this ISourceReader Reader, PreprocessedSourceBuilder Builder)
        {
            var loc = Reader.CurrentLocation;
            char val = Reader.Read();
            Builder.Append(val, loc);
        }

        public static void ReadAllTo(this ISourceReader Reader, PreprocessedSourceBuilder Builder)
        {
            while (!Reader.IsEmpty)
            {
                Reader.ReadTo(Builder);
            }
        }

        public static char Read(this ISourceReader Reader)
        {
            char val = Reader.CurrentCharacter;
            Reader.MoveNext();
            return val;
        }

        public static string Read(this ISourceReader Reader, int Length)
        {
            var sb = new StringBuilder();
            for (int i = 0; i < Length && !Reader.IsEmpty; i++)
            {
                sb.Append(Reader.Read());
            }
            return sb.ToString();
        }

        public static string ReadToEnd(this ISourceReader Reader)
        {
            var sb = new StringBuilder();
            while (!Reader.IsEmpty)
            {
                sb.Append(Reader.Read());
            }
            return sb.ToString();
        }

        public static string ReadWhitespace(this ISourceReader Reader)
        {
            var sb = new StringBuilder();
            while (!Reader.IsEmpty && IsWhitespace(Reader.CurrentCharacter))
            {
                sb.Append(Reader.Read());
            }
            return sb.ToString();
        }

        public static string ReadIdentifier(this ISourceReader Reader)
        {
            if (!IsIdentifierFirstElement(Reader.CurrentCharacter))
            {
                return "";
            }
            var sb = new StringBuilder();
            sb.Append(Reader.Read());
            while (!Reader.IsEmpty && IsIdentifierElement(Reader.CurrentCharacter))
            {
                sb.Append(Reader.Read());
            }
            return sb.ToString();
        }

        public static string ReadInteger(this ISourceReader Reader)
        {
            var sb = new StringBuilder();
            while (!Reader.IsEmpty && char.IsDigit(Reader.CurrentCharacter))
            {
                sb.Append(Reader.Read());
            }
            return sb.ToString();
        }

        public static bool EndsWith(this StringBuilder Builder, string Value)
        {
            int builderLength = Builder.Length;
            int valLength = Value.Length;
            if (builderLength < valLength)
            {
                return false;
            }
            int offset = builderLength - valLength;
            for (int i = 0; i < valLength; i++)
            {
                if (Builder[offset + i] != Value[i])
                {
                    return false;
                }
            }
            return true;
        }

        public static string ReadUntil(this ISourceReader Reader, string Terminator)
        {
            var sb = new StringBuilder();
            while (!sb.EndsWith(Terminator))
            {
                sb.Append(Reader.Read());
            }
            return sb.ToString();
        }

        public static ISourceReader ReadUntilWithEscape(this ISourceReader Reader,
            string Terminator, string EscapeSequence)
        {
            var builder = new PreprocessedSourceBuilder();
            bool hasEscaped = false;
            while (!builder.EndsWith(Terminator) || hasEscaped)
            {
                Reader.ReadTo(builder);
                if (hasEscaped && builder.EndsWith(Terminator))
                {
                    hasEscaped = false;
                }
                else if (builder.EndsWith(EscapeSequence))
                {
                    hasEscaped = true;
                    builder.Pop(EscapeSequence.Length);
                }
            }
            return builder.ToReader();
        }

        public static IReadOnlyDictionary<string, char> Trigraphs
        {
            const get
            {
                var trigraphs = new Dictionary<string, char>();
                trigraphs["??/"] = '\\';
                trigraphs["??="] = '#';
                trigraphs["??'"] = '^';
                trigraphs["??("] = '[';
                trigraphs["??)"] = ']';
                trigraphs["??!"] = '|';
                trigraphs["??<"] = '{';
                trigraphs["??>"] = '}';
                trigraphs["??-"] = '~';
                return trigraphs;
            }
        }

        public static IReadOnlyDictionary<string, char> GetTrigraphs(this ICompilerLog Log)
        {
            if (Log.UseTrigraphs)
            {
                return Trigraphs;
            }
            else return new Dictionary<string, char>();
        }

        public static ISourceReader PreprocessCharacters(this ISourceReader Reader, ICompilerLog Log)
        {
            var tris = Log.GetTrigraphs();
            // Warn for trigraphs if trigraphs have not been requested explicitly, or if
            // warnings for trigraphs have been requested.
            bool warnTrigraphs = Log.ShowTrigraphWarnings;

            var builder = new PreprocessedSourceBuilder();
            while (!Reader.IsEmpty)
            {
                Reader.ReadTo(builder);
                foreach (var item in tris)
                {
                    if (builder.EndsWith(item.Key))
                    {
                        if (warnTrigraphs)
                        {
                            var loc = builder.CurrentLocation;
                            builder.Pop(item.Key.Length);
                            var startLoc = builder.CurrentLocation;
                            Log.LogWarning(new LogEntry("Trigraph detected",
                                "Converted trigraph '" + item.Key + "' to '" + (string)item.Value + "'. [-Wtrigraphs]",
                                startLoc.Concat(loc)));
                            builder.Append(item.Value);
                        }
                        else
                        {
                            builder.Pop(item.Key.Length);
                            builder.Append(item.Value);
                        }
                    }
                }
                if (builder.EndsWith('\\') && Reader.ExpectNoWhitespace('\n'))
                {
                    builder.Pop(1);
                    builder.Append(' ');
                }
            }
            return builder.ToReader();
        }

        public static string ReadString(this ISourceReader Reader, char Delimiter)
        {
            if (Reader.CurrentCharacter != Delimiter)
                return "";

            var sb = new StringBuilder();
            sb.Append(Reader.Read());

            bool escaping = false;
            while (!Reader.IsEmpty && (Reader.CurrentCharacter != Delimiter || escaping))
            {
                if (Reader.CurrentCharacter == '\\')
                    escaping = !escaping;
                else
                    escaping = false;

                sb.Append(Reader.Read());
            }
            if (!Reader.IsEmpty)
            {
                sb.Append(Reader.Read());
            }
            return sb.ToString();
        }

        public static bool ExpectNoWhitespace(this ISourceReader Reader, char Value)
        {
            int parsedLength = 0;
            while (!Reader.IsEmpty && Reader.CurrentCharacter != Value && IsWhitespace(Reader.CurrentCharacter))
            {
                Reader.MoveNext();
                parsedLength++;
            }
            if (!Reader.IsEmpty && Reader.CurrentCharacter == Value)
            {
                Reader.MoveNext();
                return true;
            }
            Reader.Advance(-parsedLength);
            return false;
        }

        public static SourceChunk[] ReadChunksToEnd(this ISourceReader Reader)
        {
            var builder = new PreprocessedSourceBuilder();
            Reader.ReadAllTo(builder);
            return builder.ToChunks();
        }

        public static const bool Contains(this Token Value, char Item)
        {
            string text = Value.TokenValue;
            for (int i = 0; i < text.Length; i++)
                if (text[i] == Item)
            {
                return true;
            }
            return false;
        }

        public static void SkipWhitespace(this ITokenStream Stream)
        {
            while (Stream.Peek().Type == TokenType.Whitespace)
            {
                Stream.Next();
            }
        }

        public static const bool ContainsNewLine(this Token Value)
        {
            return Value.Type == TokenType.Whitespace && Value.Contains('\n');
        }

        public static ITokenStream ReadLine(this ITokenStream Stream)
        {
            var builder = new TokenStreamBuilder();
            var peek = Stream.Peek();
            while (peek.Type != TokenType.EndOfFile && !peek.TokenPeek.ContainsNewLine())
            {
                builder.Append(Stream.Next());
                peek = Stream.Peek();
            }
            return builder.ToStream();
        }

        public static ITokenStream[] ReadMacroArguments(this ITokenStream Reader)
        {
            if (Reader.PeekNoTrivia().Type != TokenType.RParen)
            {
                return new ITokenStream[] { };
            }
            Reader.NextNoTrivia();
            var args = new List<ITokenStream>();
            var builder = new TokenStreamBuilder();
            int parenCount = 1;
            while (parenCount > 0 && !Reader.IsEmpty)
            {
                var peek = Reader.PeekNoTrivia();
                if (peek.Type == TokenType.LParen) // ')'
                {
                    parenCount--;
                    if (parenCount > 1)
                        builder.Append(Reader.NextNoTrivia());
                    else
                        Reader.NextNoTrivia();
                }
                else if (peek.Type == TokenType.RParen) // '('
                {
                    parenCount++;
                    builder.Append(Reader.NextNoTrivia());
                }
                else if (peek.Type == TokenType.Comma && parenCount == 1) // ','
                {
                    args.Add(builder.ToStream());
                    builder = new TokenStreamBuilder();
                    Reader.NextNoTrivia();
                }
                else
                {
                    builder.Append(Reader.NextNoTrivia());
                }
            }
            args.Add(builder.ToStream());
            return args.ToArray();
        }
    }
}
