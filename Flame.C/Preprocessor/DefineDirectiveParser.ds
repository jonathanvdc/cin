using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler;
using Flame.Syntax;
using Flame.C.Lexer;

namespace Flame.C.Preprocessor
{
    public static class DefineDirectiveParser : IDirectiveParser
    {
        public const bool Matches(string Name)
        {
            return Name.ToLower().Equals("define");
        }
        public IDirective Parse(Token HashToken, Token Name, PreprocessorState State, ITokenStream Reader)
        {
            var defName = Reader.NextNoTrivia(TokenType.Identifier, State.Environment.Log);
            ITokenStream[] args = Reader.ReadMacroArguments();
            Token[] parameters = new Token[args.Length];
            foreach (var input in args, var output in parameters)
            {
                output = input.NextNoTrivia(TokenType.Identifier, State.Environment.Log);
            }
            var body = ParseDirectiveBody(parameters, State, Reader);
            return new DefineDirective(HashToken, Name, defName, parameters, body);
        }

        private int GetDefineBodyChunkIndex(Token[] Parameters, Token Identifier)
        {
            for (int i = 0; i < Parameters.Length; i++)
                if (Identifier.TokenValue.Equals(Parameters[i].TokenValue))
            {
                return i;
            }
            return -1;
        }

        private DefineBody ParseDirectiveBody(Token[] Parameters, PreprocessorState State, ITokenStream Reader)
        {
            var expanded = State.Expand(Reader).ToStream();
            expanded.SkipWhitespace();
            var chunks = new List<DefineBodyChunk>();
            var builder = new TokenStreamBuilder();
            while (!expanded.IsEmpty)
            {
                var token = expanded.Next();
                if (token.Type == TokenType.Identifier)
                {
                    int index = GetDefineBodyChunkIndex(Parameters, token);
                    if (index == -1)
                    {
                        builder.Append(token);
                    }
                    else
                    {
                        var bodyChunk = new DefineBodyChunk(new Token[] { token }, index);
                        chunks.Add(new DefineBodyChunk(builder.ToTokens()));
                        chunks.Add(bodyChunk);
                        builder = new TokenStreamBuilder();
                    }
                }
                else
                {
                    builder.Append(token);
                }
            }
            chunks.Add(new DefineBodyChunk(builder.ToTokens()));
            return new DefineBody(chunks);
        }
    }
}
