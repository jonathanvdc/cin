using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Build;
using Flame.Compiler;
using Flame.Compiler.Build;
using Flame.Compiler.Statements;
using Flame.Compiler.Expressions;
using Flame.C.Lexer;
using Flame.Syntax;
using Flame.Syntax.C;

namespace Flame.C.Build
{
    public class SyntaxTypedef : ICType
    {
        public const this(
            set IType ElementType, set IDeclaratorSyntax DeclaratorSyntax,
            set ICSyntaxState DeclaringState);

        public IType ElementType { const get; private set; }
        public IDeclaratorSyntax DeclaratorSyntax { const get; private set; }
        public ICSyntaxState DeclaringState { const get; private set; }

        public INamespace DeclaringNamespace { const get return DeclaringState.DeclaringUnit; }

        public string Name { const get return DeclaratorSyntax.Name; }
        public string TypeName { const get return Name; }
        public string LocalName { const get return Name; }

        private IType type;
        public IType Type
        {
            get
            {
                if (type == null)
                {
                    type = DeclaratorSyntax.CreateType(ElementType, DeclaringState);
                }
                return type;
            }
        }

        public CompilationUnit DeclaringUnit
        {
            const get return DeclaringState.DeclaringUnit;
        }

        public bool IsDefinition
        {
            const get return Type.IsDefined;
        }

        public string FullName
        {
            const get return MemberExtensions.CombineNames(DeclaringNamespace.FullName, Name);
        }

        public IAncestryRules AncestryRules
        {
            const get { return TypedefAncestryRules; }
        }

        public [IAttribute] Attributes
        {
            get { return Type.Attributes; }
        }

        public [IGenericParameter] GenericParameters
        {
            get { return Type.GenericParameters; }
        }

        public const IBoundObject GetDefaultValue()
        {
            return null;
        }

        #region Members

        public [IType] BaseTypes
        {
            get { return Type.BaseTypes; }
        }

        public [IMethod] Methods
        {
            get { return Type.Methods; }
        }

        public [IProperty] Properties
        {
            get { return Type.Properties; }
        }

        public [IField] Fields
        {
            get { return Type.Fields; }
        }

        #endregion
    }
}
