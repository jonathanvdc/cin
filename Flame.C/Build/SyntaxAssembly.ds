using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Build;
using Flame.Binding;
using Flame.Compiler;
using Flame.Syntax;
using Flame.Syntax.C;

namespace Flame.C.Build
{
    public class SyntaxAssembly : IAssembly, INamespaceBranch
    {
        public const this(set string Name, set Version AssemblyVersion,
            set ICompilerLog Log, set IBinder ExternalBinder,
            set IConverter<IType, string> TypeNamer)
        {
            this.units = new List<CompilationUnit>();
            this.renamedTypes = new HashSet<IRenamableType>();
            this.globalBackingType = new DescribedType("Globals", this);
        }

        private List<CompilationUnit> units;
        private HashSet<IRenamableType> renamedTypes;
        private DescribedType globalBackingType;
        public IType GlobalType { const get return globalBackingType; }

        public string Name { const get; private set; }
        public Version AssemblyVersion { const get; private set; }
        public IBinder ExternalBinder { const get; private set; }
        public IAssembly DeclaringAssembly { const get return this; }
        public ICompilerLog Log { const get; private set; }
        public IEnvironment Environment { const get return ExternalBinder.Environment; }
        public IConverter<IType, string> TypeNamer { const get; private set; }

        public CompilationUnit CreateCompilationUnit()
        {
            var unit = new CompilationUnit(this);
            units.Add(unit);
            return unit;
        }
        public void DeclareGlobal(SyntaxField Field)
        {
            var preExisting = globalBackingType.GetField(Field.Name, true);
            if (preExisting == null)
            {
                Field.DeclaringType = globalBackingType;
                globalBackingType.AddField(Field);
            }
            else if (Field.IsDefinition)
            {
                ((SyntaxField)preExisting).MakeDefinition(Field);
            }
        }
        public void DeclareGlobal(SyntaxFunction Method)
        {
            var preExisting = globalBackingType.GetMethod(Method.Name, true, Method.ReturnType, Method.GetParameters().GetTypes());
            if (preExisting == null)
            {
                globalBackingType.AddMethod(Method);
            }
            else if (Method.IsDefinition)
            {
                ((SyntaxFunction)preExisting).MakeDefinition(Method);
            }
        }
        public void RenameGlobal(IRenamableType Type)
        {
            RenameGlobal(Type, Type.Name, true);
        }
        public void RenameGlobal(IRenamableType Type, string Name, bool PreferOriginalName)
        {
            string fullName;
            if (Type.DeclaringNamespace == null)
            {
                fullName = Name;
            }
            else
            {
                fullName = MemberExtensions.CombineNames(Type.DeclaringNamespace.FullName, Name);
            }

            if (!ContainsType(fullName))
            {
                if (!PreferOriginalName)
                {
                    Type.Rename(Name);
                }
                return;
            }

            int index = 1;
            while (ContainsType(fullName + (string)index))
            {
                index++;
            }

            Type.Rename(Name + (string)index);
        }
        public void SuggestRename(IRenamableType Type, string Name)
        {
            if (Type.IsAnonymous && !renamedTypes.Contains(Type))
            {
                RenameGlobal(Type, Name, false);
                renamedTypes.Add(Type);
            }
        }

        public string FullName { const get return Name; }

        public [IAttribute] GetAttributes()
        {
            return Enumerable.Empty<IAttribute>();
        }

        public const IMethod GetEntryPoint()
        {
            return null;
        }

        public const IBinder CreateBinder()
        {
            return new NamespaceTreeBinder(ExternalBinder.Environment, this);
        }

        public const bool ContainsType(string FullName)
        {
            if (FullName.Equals(GlobalType.FullName))
                return true;

            foreach (var item in units)
            {
                foreach (var type in item.GetTypes())
                    if (type.FullName.Equals(FullName))
                {
                    return true;
                }
            }
            return false;
        }

        public const IType[] GetTypes()
        {
            [IType] results = new IType[] { GlobalType };
            foreach (var item in units)
            {
                results = Enumerable.Concat<IType>(results, item.GetTypes());
            }
            return Enumerable.ToArray<IType>(results);
        }

        public const [INamespaceBranch] GetNamespaces()
        {
            return Enumerable.Empty<INamespaceBranch>();
        }
    }
}
