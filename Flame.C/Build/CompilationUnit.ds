using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Build;
using Flame.Syntax;
using Flame.Syntax.C;

namespace Flame.C.Build
{
    public class CompilationUnit : INamespace
    {
        public const this(set SyntaxAssembly Assembly)
        {
            Scope = new DeclarationScope(this);
            allTypes = new List<IType>();
        }

        public SyntaxAssembly Assembly { const get; private set; }
        public IAssembly DeclaringAssembly { const get return Assembly; }
        public string Name { const get return Assembly.Name; }
        public string FullName { const get return Name; }
        public DeclarationScope Scope { const get; private set; }

        public const [IAttribute] GetAttributes()
        {
            return Assembly.GetAttributes();
        }

        public ICSyntaxState GetSyntaxState()
        {
            var descMethod = new DescribedMethod();
            descMethod.DeclaringType = Assembly.GlobalType;
            return new SyntaxState(this, descMethod, Scope,
                Assembly.Log, Assembly.TypeNamer);
        }

        private List<IType> allTypes;

        public void DeclareGlobal(SyntaxFunction Method)
        {
            Assembly.DeclareGlobal(Method);
        }

        public void DeclareGlobal(SyntaxField Field)
        {
            Assembly.DeclareGlobal(Field);
        }

        public void DeclareGlobal(SyntaxStruct Type)
        {
            Assembly.RenameGlobal(Type);
            allTypes.Add((IType)Type);
        }

        public [IField] Globals { const get return Scope.LocalFields; }
        public [IMethod] Functions { const get return Scope.LocalFunctions; }
        public [ICType] Types { const get return Scope.LocalTypes; }

        public const IType[] GetTypes()
        {
            return allTypes.ToArray();
        }
    }
}
