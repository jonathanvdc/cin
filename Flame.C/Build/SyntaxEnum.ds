using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Build;
using Flame.Compiler;
using Flame.Compiler.Build;
using Flame.Compiler.Statements;
using Flame.Compiler.Expressions;
using Flame.C.Lexer;
using Flame.Syntax;
using Flame.Syntax.C;

namespace Flame.C.Build
{
    public class SyntaxEnum : IDefinableType<EnumDefinitionSyntax>
    {
        public const this(set EnumDeclarationSyntax DeclarationSyntax,
            set ICSyntaxState DeclaringState)
        {
            this.Name = GenerateName();
        }

        public const this(EnumDefinitionSyntax DefinitionSyntax,
            set ICSyntaxState DeclaringState)
        {
            this.DeclarationSyntax = DefinitionSyntax.Declaration;
            this.Name = GenerateName();
            this.MakeDefinition(DefinitionSyntax);
        }

        private const string GenerateName()
        {
            string tName = TypeName;
            if (!string.IsNullOrWhiteSpace(tName))
                return tName;
            else return "anonymous_enum";
        }

        public EnumDeclarationSyntax DeclarationSyntax { const get; private set; }
        public EnumDefinitionSyntax DefinitionSyntax { const get; private set; }
        public ICSyntaxState DeclaringState { const get; private set; }
        public INamespace DeclaringNamespace { const get return DeclaringState.DeclaringUnit; }
        public string Name { const get; set; }

        public void Rename(string Name)
        {
            this.Name = Name;
        }

        public string TypeName { const get return DeclarationSyntax.TypeName; }
        public string LocalName
        {
            const get
            {
                string tName = TypeName;
                if (!string.IsNullOrWhiteSpace(tName))
                    return "struct " + tName;
                else return null;
            }
        }

        public CompilationUnit DeclaringUnit
        {
            const get return DeclaringState.DeclaringUnit;
        }

        public bool IsDefinition
        {
            const get return DefinitionSyntax != null;
        }

        public void MakeDefinition(SyntaxEnum Other)
        {
            MakeDefinition(Other.DefinitionSyntax);
        }

        public void MakeDefinition(EnumDefinitionSyntax Body)
        {
            this.DefinitionSyntax = Body;
            this.cachedFields = null;
            this.enumType = null;
        }

        public const ICSyntaxState GetSyntaxState()
        {
            var descMethod = new DescribedMethod("initenum", this);
            return new SyntaxState(
                DeclaringState.DeclaringUnit, descMethod,
                DeclaringState.Scope, DeclaringState.Log,
                DeclaringState.MemberProvider, DeclaringState.TypeNamer);
        }

        public string FullName
        {
            get { return MemberExtensions.CombineNames(DeclaringNamespace.FullName, Name); }
        }

        public [IAttribute] Attributes
        {
            get
            {
                return new IAttribute[]
                {
                    new AccessAttribute(AccessModifier.Public),
                    PrimitiveAttributes.EnumAttribute
                };
            }
        }

        public IAncestryRules AncestryRules
        {
            const get { return DefinitionAncestryRules; }
        }

        public [IGenericParameter] GenericParameters
        {
            get { return Enumerable.Empty<IGenericParameter>(); }
        }

        public IBoundObject GetDefaultValue()
        {
            return null;
        }

        #region Members

        private IType enumType;
        public IType UnderlyingType
        {
            get
            {
                if (enumType == null)
                {
                    if (!IsDefinition)
                    {
                        enumType = PrimitiveTypes.Int64;
                    }
                    else
                    {
                        int maxMag = 1;
                        IType chosenType = PrimitiveTypes.Int8;
                        foreach (var item in Fields)
                        {
                            var type = ((SyntaxEnumLiteral)item).PreferredUnderlyingType;
                            int mag = type.GetPrimitiveMagnitude();
                            if (mag > maxMag)
                            {
                                maxMag = mag;
                                chosenType = type;
                            }
                        }
                        enumType = chosenType;
                    }
                }
                return enumType;
            }
        }

        public [IType] BaseTypes
        {
            get
            {
                if (!IsDefinition)
                {
                    return new IType[] { };
                }
                else
                {
                    return new IType[] { UnderlyingType };
                }
            }
        }

        public [IMethod] Methods
        {
            get { return new IMethod[] { }; }
        }

        public [IMethod] Constructors
        {
            get { return new IMethod[] { }; }
        }

        public [IProperty] Properties
        {
            get { return new IProperty[] { }; }
        }

        public bool ApplyDefinition()
        {
            if (cachedFields == null)
            {
                if (!IsDefinition)
                {
                    return false;
                }
                CreateFields();
            }
            return true;
        }

        private void CreateFields()
        {
            var results = new List<IField>();
            var state = GetSyntaxState();
            var vals = DefinitionSyntax.Values;
            for (int i = 0; i < vals.Count; i++)
            {
                results.Add(new SyntaxEnumLiteral(this, vals[i], i));
            }
            cachedFields = results.ToArray();
        }

        private IField[] cachedFields;
        public [IField] Fields
        {
            get
            {
                if (!ApplyDefinition())
                {
                    return new IField[] { }; // Keep it civil by returning an array.
                }
                return cachedFields;
            }
        }

        #endregion
    }
}
