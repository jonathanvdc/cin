using System;
using System.Collections.Generic;
using System.Text;

namespace Flame.C.Lexer
{
    public class MemoryTokenStream : ITokenStream
    {
        public const this(Token[] Tokens)
        {
            this.tokens = Tokens;
            this.index = 0;
        }

        private Token[] tokens;
        private int index;

        public Token Next()
        {
            if (index < tokens.Length)
            {
                ++index;
                return tokens[index - 1];
            }
            else
            {
                return Token.EndOfFile;
            }
        }

        public void Reset()
        {
            index = 0;
        }

        public const PeekToken Peek(TokenIdentifier Position)
        {
            if (Position.Identifier > -1 && Position.Identifier < tokens.Length)
            {
                return new PeekToken(Position.Identifier + 1, tokens[Position.Identifier]);
            }
            else
            {
                return PeekToken.EndOfFile;
            }
        }

        public TokenIdentifier CurrentPosition
        {
            const get { return new TokenIdentifier(index); }
        }

        public void Seek(TokenIdentifier Position)
        {
            this.index = Position.Identifier;
        }

        public override const string ToString()
        {
            var sb = new StringBuilder();
            foreach (var item in tokens)
            {
                sb.Append(item.ToString());
            }
            return sb.ToString();
        }
    }
}
