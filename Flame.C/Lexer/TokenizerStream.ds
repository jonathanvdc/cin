using System;
using System.Collections.Generic;
using System.Text;
using Flame.Compiler;
using Flame.C.Preprocessor;

namespace Flame.C.Lexer
{
	public class TokenizerStream : ITokenStream
	{
		public const this(ISourceReader Reader)
		{
			this.Reader = new ExpandedReader(Reader);
			Initialize();
		}

		private void Initialize()
		{
			this.tokens = new List<Token>();

			this.keywords = new Dictionary<string, TokenType>();
			this.keywords["false"] = TokenType.FalseLiteral;
			this.keywords["true"] = TokenType.TrueLiteral;
			this.keywords["auto"] = TokenType.AutoKeyword;
			this.keywords["if"] = TokenType.IfKeyword;
			this.keywords["else"] = TokenType.ElseKeyword;
			this.keywords["while"] = TokenType.WhileKeyword;
			this.keywords["sizeof"] = TokenType.SizeOfKeyword;
			this.keywords["for"] = TokenType.ForKeyword;
			this.keywords["return"] = TokenType.ReturnKeyword;
			this.keywords["struct"] = TokenType.StructKeyword;
			this.keywords["union"] = TokenType.UnionKeyword;
			this.keywords["enum"] = TokenType.EnumKeyword;
			this.keywords["typedef"] = TokenType.TypedefKeyword;
			this.keywords["inline"] = TokenType.InlineKeyword;
			this.keywords["const"] = TokenType.ConstKeyword;
			this.keywords["static"] = TokenType.StaticKeyword;
			this.keywords["null"] = TokenType.NullKeyword;
			this.keywords["break"] = TokenType.BreakKeyword;
			this.keywords["continue"] = TokenType.ContinueKeyword;
			this.keywords["do"] = TokenType.DoKeyword;
			this.keywords["unsigned"] = TokenType.UnsignedKeyword;
			this.keywords["signed"] = TokenType.SignedKeyword;
			this.keywords["long"] = TokenType.LongKeyword;
			this.keywords["short"] = TokenType.ShortKeyword;
			this.keywords["char"] = TokenType.CharKeyword;
			this.keywords["void"] = TokenType.VoidKeyword;
			this.keywords["int"] = TokenType.IntKeyword;
			this.keywords["float"] = TokenType.FloatKeyword;
			this.keywords["double"] = TokenType.DoubleKeyword;
			this.keywords["_Generic"] = TokenType.GenericKeyword;
			this.keywords["default"] = TokenType.DefaultKeyword;
			this.keywords["case"] = TokenType.CaseKeyword;
			this.keywords["switch"] = TokenType.SwitchKeyword;
			this.keywords["sizeof"] = TokenType.SizeOfKeyword;
			this.keywords["typeof"] = TokenType.TypeOfKeyword;
			this.keywords["__typeof__"] = TokenType.TypeOfKeyword;

			this.operators1 = new Dictionary<char, TokenType>();
			this.operators1[';'] = TokenType.Semicolon;
			this.operators1[':'] = TokenType.Colon;
			this.operators1['.'] = TokenType.Dot;
			this.operators1[','] = TokenType.Comma;
			this.operators1['('] = TokenType.RParen;
			this.operators1[')'] = TokenType.LParen;
			this.operators1['['] = TokenType.RBrackets;
			this.operators1[']'] = TokenType.LBrackets;
			this.operators1['{'] = TokenType.RBraces;
			this.operators1['}'] = TokenType.LBraces;
			this.operators1['&'] = TokenType.And;
			this.operators1['|'] = TokenType.Bar;
			this.operators1['%'] = TokenType.Percent;
			this.operators1['^'] = TokenType.Caret;
			this.operators1['~'] = TokenType.Tilde;
			this.operators1['!'] = TokenType.Not;
			this.operators1['>'] = TokenType.GreaterThan;
			this.operators1['<'] = TokenType.LessThan;
			this.operators1['='] = TokenType.Equals;
			this.operators1['+'] = TokenType.Plus;
			this.operators1['-'] = TokenType.Minus;
			this.operators1['*'] = TokenType.Asterisk;
			this.operators1['/'] = TokenType.Slash;

			this.operators2 = new Dictionary<string, TokenType>();
			this.operators2["::"] = TokenType.ColonColon;
			this.operators2["->"] = TokenType.RArrow;
			this.operators2["&&"] = TokenType.AndAnd;
			this.operators2["&="] = TokenType.AndEquals;
			this.operators2["||"] = TokenType.BarBar;
			this.operators2["|="] = TokenType.BarEquals;
			this.operators2["%="] = TokenType.PercentEquals;
			this.operators2["^="] = TokenType.CaretEquals;
			this.operators2["~="] = TokenType.TildeEquals;
			this.operators2["!="] = TokenType.NotEquals;
			this.operators2["=="] = TokenType.EqualsEquals;
			this.operators2[">="] = TokenType.GreaterThanOrEquals;
			this.operators2["<="] = TokenType.LessThanOrEquals;
			//this.operators2[">>"] = TokenType.RightShift; // This conflicts with 'List<Dictionary<string, int>>'. Too bad for right shift.
			this.operators2["<<"] = TokenType.LeftShift;
			this.operators2["+="] = TokenType.PlusEquals;
			this.operators2["-="] = TokenType.MinusEquals;
			this.operators2["++"] = TokenType.PlusPlus;
			this.operators2["--"] = TokenType.MinusMinus;
			this.operators2["*="] = TokenType.AsteriskEquals;
			this.operators2["/="] = TokenType.SlashEquals;
		}

		public ExpandedReader Reader { const get; private set; }

		private List<Token> tokens;
		private int currentIndex;
		private Dictionary<string, TokenType> keywords;
		private Dictionary<char, TokenType> operators1;
		private Dictionary<string, TokenType> operators2;

		private string ParseWhitespace()
		{
			return Reader.ReadWhitespace();
		}

		private string ParseIdentifier()
		{
			return Reader.ReadIdentifier();
		}

		private string ParseUntil(int StartLength, string End)
		{
			Reader.Advance(StartLength);
			return Reader.ReadUntil(End);
		}

		private string ParseString(char Delimiter)
		{
			return Reader.ReadString(Delimiter);
		}

		private string ParseInteger()
		{
			return Reader.ReadInteger();
		}

		private Token ParseNumberToken()
		{
			TokenType type = TokenType.Integer;

			var sb = new StringBuilder();

			if (Reader.CurrentCharacter == '.')
			{
				sb.Append(Reader.Read());
				type = TokenType.Float64;
			}

			sb.Append(ParseInteger());

			if (!Reader.IsEmpty && (Reader.CurrentCharacter == '.' && type != TokenType.Float64))
			{
				sb.Append(Reader.Read());
				type = TokenType.Float64;
				sb.Append(ParseInteger());
			}

			if (!Reader.IsEmpty && (Reader.CurrentCharacter == 'e' || Reader.CurrentCharacter == 'E'))
			{
				sb.Append(Reader.Read());
				if (!Reader.IsEmpty && (Reader.CurrentCharacter == '+' || Reader.CurrentCharacter == '-'))
					sb.Append(Reader.Read());
				type = TokenType.Float64;
				sb.Append(ParseInteger());
			}

			if (!Reader.IsEmpty && (Reader.CurrentCharacter == 'f' || Reader.CurrentCharacter == 'F'))
		    {
				sb.Append(Reader.Read());
		    	type = TokenType.Float32;
		    }

			return new Token(type, sb.ToString());
		}

		private Token ParseNextTokenValue()
		{
			char nextChar = Reader.CurrentCharacter;
			if (SourceReaderExtensions.IsWhitespace(nextChar))
			{
				return new Token(TokenType.Whitespace, ParseWhitespace());
			}
			else if (SourceReaderExtensions.IsIdentifierFirstElement(nextChar))
			{
			    string ident = ParseIdentifier();
			    if (keywords.ContainsKey(ident)) return new Token(keywords[ident], ident);
			    else return new Token(TokenType.Identifier, ident);
			}
			else if (nextChar == '"')
			{
				return new Token(TokenType.String, ParseString('"'));
			}
			else if (nextChar == '\'')
			{
				return new Token(TokenType.Char, ParseString('\''));
			}
			else if (nextChar == '#')
			{
				return new Token(TokenType.PreprocessorDirective, ParseUntil(1, "\n"));
			}
			string peek = Reader.PeekString(3);
			if (peek.Equals("///"))
				return new Token(TokenType.DescriptionComment, ParseUntil(3, "\n"));

			string slice = peek.Substring(0, Math.Min(2, peek.Length));
			if (slice.Equals("//"))
			{
				return new Token(TokenType.LineComment, ParseUntil(2, "\n"));
			}
			else if (slice.Equals("/*"))
			{
				return new Token(TokenType.BigComment, ParseUntil(2, "*/"));
			}
			else if (operators2.ContainsKey(slice))
			{
				Reader.Advance(2);
				return new Token(operators2[slice], slice);
			}
			else if (nextChar == '.' && char.IsDigit(slice[1]))
			{
				return ParseNumberToken();
			}
			else if (SourceReaderExtensions.IsHexIntegerStart(slice))
			{
				Reader.Advance(2);
			    string integer = ParseInteger();
			    return new Token(TokenType.HexInteger, slice + integer);
			}
			else if (SourceReaderExtensions.IsBinaryIntegerStart(slice))
			{
				Reader.Advance(2);
				string integer = ParseInteger();
			    return new Token(TokenType.BinaryInteger, slice + integer);
			}

			if (operators1.ContainsKey(nextChar))
			{
				Reader.MoveNext();
				return new Token(operators1[nextChar], nextChar.ToString());
			}
			if (SourceReaderExtensions.IsNumberToken(nextChar))
			{
				return ParseNumberToken();
			}

			Reader.MoveNext();
			return new Token(TokenType.UNDEFINED, nextChar.ToString());
		}

		private Token ParseNextToken()
		{
			var startLoc = Reader.CurrentLocation;

			if (Reader.IsEmpty)
				return new Token(TokenType.EndOfFile, "", startLoc);

			Token tokenValue = ParseNextTokenValue();
			var endLoc = Reader.CurrentLocation;
			var token = new Token(tokenValue.Type, tokenValue.TokenValue, startLoc.Concat(endLoc));
			tokens.Add(token);
			return token;
		}

		#region ITokenStream Implementation

		private Token TokenAt(int Index)
		{
			while (tokens.Count < Index + 1)
			{
				var token = ParseNextToken();
				if (token.Type == TokenType.EndOfFile)
					return token;
			}
			return tokens[Index];
		}

		public Token Next()
		{
			var token = TokenAt(currentIndex);
			if (token.Type != TokenType.EndOfFile)
				currentIndex++;
			return token;
		}

		public void Seek(TokenIdentifier Identifier)
		{
			currentIndex = Identifier.Identifier;
		}

		public TokenIdentifier CurrentPosition
		{
			const get return new TokenIdentifier(currentIndex);
		}

		public const PeekToken Peek(TokenIdentifier Position)
		{
			return new PeekToken(Position.Identifier + 1, TokenAt(Position.Identifier));
		}

		public void Reset()
		{
			currentIndex = 0;
		}

		#endregion
	}
}
